ORM => 
  Object-Relational Mapper is a Programming technique that helps application to interact with database such as SQLite,MySQL,PostgreSQL,Oracle 
  -> Create a database schema from defined classes or models.
  -> generate SQL from Python code for a particular database which means developer do not need to write SQL code. 
  -> Helps to change the database easily.
  -> use connectors to connect databases with a web application.


QuerySet =>
  A querySet can be defined as a list containing all those objects we have created using the Django model.

  QuerySets helps us 
     -> read the data from the database 
     -> filter it 
     -> order it 

Model =>
  A model is the single, definitive source of information about our data. 
  It contains the 
    -> essential fields and behaviors of the data.
    -> each model maps to a single database table.

Model Class => 
  -> Model class is a class which will represent a table in database. 
  -> Each model is a Python class that subclasses django.db.models.Model 
  -> Each attribute represents a database field 
  -> Django gives automatically-generated database-access API 
  -> Django provides sqlite database by default .
  -> We can use other database like MySQL,Oracle SQL etc.

Migrations => 
   Migrations are way of propagating changes to make models(adding a field,deleting a model, etc) into your database schema. 

   makemigrations: is used convert model class into sql statements.create a file which will contain sql statements. This file is located in Application's migrations folder. 
     
     ** python manage.py makemigrations

   migrate: is used to execute sql statements generated by makemigrations  
     ** python manage.py migrate 

   showmigrations: This lists a project's migrations.

Built-in Field Options => 
   -> null : contain either True or False.If True,Django will store empty values as NULL in the datebase.Default is False. 
   -> blank : contain either True or False.If True, the field is allowed to be blank.
   ** Note: null is purely database-related,whereas blank is validation-related.
   -> default : default value for the field. 
   -> verbose_name : A human-readable name for the field.If the verbose name isn't given,Django will automatically create it using the field's attribute name,converting underscores to spaces.
   -> db_column : The name of the database column to use for this field.If this isn't given,Django will use the field's name. 
   -> primary_key : If True, that field will be the primary key for the model.

   -> unique : If True,this field must unique throughout the table.This is enforced at the database level and by model validation. 
   
   Some More Fields: 
      * IntegerField
      * AutoField
      * FloatField
      * TextField
      * CharField
      * BooleanField 
      * EmailField 
      * URLField 

Model Form=> 
  In django, a ModelForm is a form that is automatically generated from an existing model.
  A ModelForm includes all the fields defined in the model,along with any additional validation and processing logic that you define in the form class.

Meta Class => 
  A metaclass is a Class that defines how other classes should behave.provides additional information about the model form.Here are some common options that can be defined in the Meta class:

  model -> The model that the form is based on.
  field -> The list of fields to include in the form .If this option is not specified, all fields in the model will be included in the form.
  exclude -> A list of fields to exclude from the form.
  widgets -> A dictionary of field names and their associated widgets. 
  labels -> A dictionary of field names and their associated labels.
  help_texts -> A dictionary of field names and their associated help text.
  error_messages -> A dictionary of field names and their associated error messages.


Model Form Fields => 
  Model Field <--> Form Field 
  -----------------------------
  AutoField -> Not Reoresented in the Form 
  BigAutoField -> Not Reoresented in the Form 
  BigIntegerField -> IntegerField with min_value set to -9223372036854775808 and max_value set to 9223372036854775807
  BinaryField -> CharField , if editable is set to true on the model field,otherwise not represented in the form.
  BooleanField -> BooleanField, or NullBooleanField if null=True .
  CharField -> CharField with max_length set to the model field's max_length and empty_value set to None if null=True. 
  DateField -> DateField 
  DateTimeField -> DateTimeField 
  DecimalField -> DecimalField
  DurationField -> DurationField
  EmailField -> EmailField
  FileField -> FileField
  FilePathField -> FilePathField
  FloatField -> FloatField
  ForeignKey -> ModelChoiceField 
  ImageField -> ImageField 
  IntegerField -> IntegerField
  IPAddressField -> IPAddressField
  GenericIPAddressField -> GenericIPAddressField
  ManyToManyField -> ModelMultipleChoiceField
  NullBooleanField -> NullBooleanField 
  PositiveIntegerField -> IntegerField
  PositiveSmallIntegerField -> IntegerField
  SlugField -> SlugField 
  SmallAutoField -> Not represented in the form.
  SmallIntegerField -> IntegerField 
  TextField -> CharField with widget=forms.Textarea 
  TimeField -> TimeField 
  URLField -> URLField
  UUIDField -> UUIDField

save() =>
save(commit=False/True) Method form.This method creates and saves a database object from the data bound to the form.by deafult True 
save(commit=False/True)
if commit=False,then it will return an object that hasn't yet been saved to the database.
